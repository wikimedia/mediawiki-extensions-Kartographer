/**
 * Frame module.
 *
 * Once the page is loaded and ready, turn all `<mapframe/>` tags into
 * interactive maps.
 *
 * @borrows Kartographer.Frame as Frame
 * @borrows Kartographer.Frame as ext.kartographer.frame
 * @class Kartographer.Frame
 * @singleton
 */
const util = require( 'ext.kartographer.util' );
const kartobox = require( 'ext.kartographer.box' );
const router = require( 'mediawiki.router' );

/**
 * References the mapframe containers of the page.
 *
 * @type {HTMLElement[]}
 */
const maps = [];

/**
 * @private
 */
let routerInited = false;

/**
 * Gets the map data attached to an element.
 *
 * @param {HTMLElement} element Element
 * @return {Object} Map properties
 * @return {number} return.latitude
 * @return {number} return.longitude
 * @return {number} return.zoom
 * @return {string} return.lang Language code
 * @return {string} return.style Map style
 * @return {string[]} return.overlays Overlay groups
 * @return {string} return.captionText
 */
function getMapData( element ) {
	const $el = $( element );
	const $caption = $el.parent().find( '.thumbcaption' );
	let captionText = '';

	if ( $caption[ 0 ] ) {
		captionText = $caption.get( 0 ).innerText;
	}

	return {
		latitude: +$el.data( 'lat' ),
		longitude: +$el.data( 'lon' ),
		zoom: +$el.data( 'zoom' ),
		lang: $el.data( 'lang' ) || util.getDefaultLanguage(),
		style: $el.data( 'style' ),
		overlays: $el.data( 'overlays' ) || [],
		captionText: captionText
	};
}

/**
 * @param {Object} data
 * @param {jQuery} $container
 * @return {Object} map KartographerMap
 */
function initMapBox( data, $container ) {
	const index = maps.length;

	data.enableFullScreenButton = true;

	const map = kartobox.map( {
		featureType: 'mapframe',
		container: $container.get( 0 ),
		center: [ data.latitude, data.longitude ],
		zoom: data.zoom,
		lang: data.lang,
		fullScreenRoute: '/map/' + index,
		allowFullScreen: true,
		dataGroups: data.overlays,
		captionText: data.captionText,
		alwaysStatic: mw.config.get( 'wgKartographerStaticMapframePreview' )
	} );

	$container.removeAttr( 'href' );
	$container.find( 'img' ).remove();

	maps[ index ] = map;

	// Special case for collapsed maps.
	// When the container is initially hidden Leaflet is not able to
	// calculate the expected size when visible. We need to force
	// updating the map to the new container size on `expand`.
	// eslint-disable-next-line no-jquery/no-sizzle
	if ( !$container.is( ':visible' ) ) {
		$container.closest( '.mw-collapsible' )
			.on( 'afterExpand.mw-collapsible', map.invalidateSizeAndSetInitialView.bind( map ) );

		// If MobileFrontend is active do the same for collapsible sections
		// Unfortunately doesn't work when those sections are immediately
		// made visible again on page load.
		mw.hook( 'mobileFrontend.section-toggled' ).add( map.invalidateSizeAndSetInitialView.bind( map ) );
	}

	return map;
}

/**
 * Create a mapbox from a given element.
 *
 * @param {HTMLElement} element Parsed <mapframe> element
 */
function initMapframeFromElement( element ) {
	const map = initMapBox( getMapData( element ), $( element ) );
	mw.hook( 'wikipage.maps' ).fire( [ map ], false /* isFullScreen */ );
}

/**
 * This code will be executed once the article is rendered and ready.
 */
mw.hook( 'wikipage.content' ).add( function ( $content ) {
	// `wikipage.content` may be fired more than once.
	while ( maps.length ) {
		maps.pop().remove();
	}

	// Wait for next draw cycle, so that the JS map is not initialized before it is on screen.
	// If initialized too early leaflet uses incorrect dimensions. phab:T151524
	// https://github.com/Leaflet/Leaflet/issues/4200
	requestAnimationFrame( function () {
		// Attributes starting with "data-mw" are banned from user content in Sanitizer; checking for their presence
		// guarantees that they were generated by Kartographer
		$content.find( '.mw-kartographer-map[data-mw-kartographer]' )
			.each( function () {
				initMapBox( getMapData( this ), $( this ) );
			} );

		// Allow customizations of interactive maps in article.
		mw.hook( 'wikipage.maps' ).fire( maps, false /* isFullScreen */ );

		if ( routerInited ) {
			return;
		}
		// execute this piece of code only once
		routerInited = true;

		// Opens a map in full screen. #/map(/:zoom)(/:latitude)(/:longitude)
		// Examples:
		//     #/map/0
		//     #/map/0/5
		//     #/map/0/16/-122.4006/37.7873
		// eslint-disable-next-line security/detect-unsafe-regex
		router.route( /map\/([0-9]+)(?:\/([0-9]+))?(?:\/([+-]?\d+\.?\d{0,5})?\/([+-]?\d+\.?\d{0,5})?)?/, function ( maptagId, zoom, latitude, longitude ) {
			const map = maps[ maptagId ];

			if ( !map ) {
				router.navigate( '' );
				return;
			}

			let position;
			if ( zoom !== undefined && latitude !== undefined && longitude !== undefined ) {
				position = {
					center: [ +latitude, +longitude ],
					zoom: +zoom
				};
			} else {
				position = map.getInitialMapPosition();
			}

			map.openFullScreen( position );
		} );

		// Check if we need to open a map in full screen.
		router.checkRoute();
	} );
} );

module.exports = {
	initMapframeFromElement: initMapframeFromElement
};
