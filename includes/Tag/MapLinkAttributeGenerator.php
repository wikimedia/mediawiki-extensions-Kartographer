<?php

namespace Kartographer\Tag;

use Config;
use FormatJson;
use Kartographer\Special\SpecialMap;
use stdClass;

/**
 * @license MIT
 */
class MapLinkAttributeGenerator {
	/** @var MapTagArgumentValidator */
	private MapTagArgumentValidator $args;
	/** @var Config */
	private Config $config;
	/** @var ?stdClass */
	private ?stdClass $markerProperties;

	/**
	 * @param MapTagArgumentValidator $args
	 * @param Config $config
	 * @param ?stdClass $markerProperties
	 */
	public function __construct( MapTagArgumentValidator $args, Config $config, ?stdClass $markerProperties ) {
		$this->args = $args;
		$this->config = $config;
		$this->markerProperties = $markerProperties;
	}

	/**
	 * Prepare MapLink array of attributes to be passed to the Node element
	 * @return array
	 */
	public function prepareAttrs(): array {
		$attrs = [
			'class' => [ 'mw-kartographer-maplink' ],
			// Attributes starting with "data-mw" are banned from user content in Sanitizer;
			// we add such an attribute here (by default empty) so that its presence can be
			// checked later to guarantee that they were generated by Kartographer
			'data-mw-kartographer' => '',
			'data-style' => $this->args->mapStyle,
			'href' => SpecialMap::link(
					$this->args->lat,
					$this->args->lon,
					$this->args->zoom,
					$this->args->resolvedLangCode
				)
		];

		if ( $this->args->zoom !== null ) {
			$attrs['data-zoom'] = (string)$this->args->zoom;
		}

		if ( $this->args->lat !== null && $this->args->lon !== null ) {
			$attrs['data-lat'] = (string)$this->args->lat;
			$attrs['data-lon'] = (string)$this->args->lon;
		}

		if ( $this->args->specifiedLangCode !== null ) {
			$attrs['data-lang'] = $this->args->specifiedLangCode;
		}

		$style = $this->extractMarkerCss();

		if ( $style ) {
			$attrs['class'][] = 'mw-kartographer-autostyled';
			$attrs['style'] = $style;
		}

		if ( $this->args->cssClass !== '' ) {
			$attrs['class'][] = $this->args->cssClass;
		}

		if ( $this->args->showGroups ) {
			$attrs['data-overlays'] = FormatJson::encode( $this->args->showGroups, false,
				FormatJson::ALL_OK );
		}

		return $attrs;
	}

	/**
	 * Extracts CSS style to be used by the link from GeoJSON
	 * @return string
	 */
	private function extractMarkerCss(): string {
		if ( $this->config->get( 'KartographerUseMarkerStyle' )
			&& $this->markerProperties
			&& isset( $this->markerProperties->{'marker-color'} )
			// JsonSchema already validates this value for us, however this regex will also fail
			// if the color is invalid
			&& preg_match( '/^#?((?:[\da-f]{3}){1,2})$/i', $this->markerProperties->{'marker-color'}, $m )
		) {
			return "background: #{$m[1]};";
		}

		return '';
	}
}
