<?php

namespace Kartographer\Tag;

use FormatJson;
use Kartographer\Special\SpecialMap;

/**
 * @license MIT
 */
class MapLinkAttributeGenerator {

	private MapTagArgumentValidator $args;

	public function __construct( MapTagArgumentValidator $args ) {
		$this->args = $args;
	}

	/**
	 * Prepare MapLink array of attributes to be passed to the Node element
	 * @return array
	 */
	public function prepareAttrs(): array {
		$attrs = [
			'class' => [ 'mw-kartographer-maplink' ],
			// Attributes starting with "data-mw" are banned from user content in Sanitizer;
			// we add such an attribute here (by default empty) so that its presence can be
			// checked later to guarantee that they were generated by Kartographer
			'data-mw-kartographer' => 'maplink',
			'data-style' => $this->args->mapStyle,
			'href' => SpecialMap::link(
					$this->args->lat,
					$this->args->lon,
					$this->args->zoom,
					$this->args->getLanguageCodeWithDefaultFallback()
				)
		];

		if ( $this->args->zoom !== null ) {
			$attrs['data-zoom'] = (string)$this->args->zoom;
		}

		if ( $this->args->hasCoordinates() ) {
			$attrs['data-lat'] = (string)$this->args->lat;
			$attrs['data-lon'] = (string)$this->args->lon;
		}

		if ( $this->args->specifiedLangCode !== null ) {
			$attrs['data-lang'] = $this->args->specifiedLangCode;
		}

		if ( $this->args->firstMarkerColor ) {
			$attrs['class'][] = 'mw-kartographer-autostyled';
			$attrs['style'] = "background: {$this->args->firstMarkerColor};";
		}

		if ( $this->args->cssClass !== '' ) {
			$attrs['class'][] = $this->args->cssClass;
		}

		if ( !$this->args->hasCoordinates() && $this->args->getTextWithFallback() === null ) {
			$attrs['class'][] = 'error';
		}

		if ( $this->args->showGroups ) {
			$attrs['data-overlays'] = FormatJson::encode( $this->args->showGroups, false,
				FormatJson::ALL_OK );
		}

		return $attrs;
	}

}
